name: CI

# Run on every commit
on: push

env:
  APP_ID: 1
  REPO_NAME_SLUG: gpswapui
  REACT_APP_NETWORK_URL: 'https://mainnet.infura.io/v3/4bf032f2d38a4ed6bb975b80d6340847'

jobs:
  setup:
    name: Setup
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up node
        uses: actions/setup-node@v2
        with:
          node-version: 12

      - name: Cache the cache folder
        uses: actions/cache@v2
        id: cache
        with:
          path: ~/.cache
          key: ${{ runner.os }}-cache-${{ secrets.CACHE_VERSION }}-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-cache-${{ secrets.CACHE_VERSION }}-

      - name: Install dependencies
        if: steps.cache.outputs.cache-hit != 'true'
        run: yarn install --frozen-lockfile

      - name: Check cypress binary
        id: check-cypress
        # Checks only whether Cypress binary folder exists, not which version, not if the binary is really there
        run: echo "::set-output name=exists::$(test -d ~/.cache/Cypress/ && echo true || echo false)"

      - name: Install cypress binary
        # Only when there's no binary folder
        if: steps.check-cypress.outputs.exists == 'false'
        # Hopes it'll install the version we want instead of the latest
        run: npx cypress install

      - name: Print stuff hopefully
        run: |
          echo "::set-output name=yarn-cache-dir::$(yarn cache dir)"
          yarn cache dir
          echo "::set-output name=cypress-cache-dir::$(ls ~/.cache/Cypress)"
          ls ~/.cache/Cypress
          $(yarn bin)/cypress verify
      # Shouldn't be needed if yarn install was successful, so I'll remove once it's all working
      # - name: Install and verify Cypress
      #   if: steps.cache-cypress.outputs.cache-hit != 'true'
      #   env:
      #     # make sure every Cypress install prints minimal information
      #     CI: 1
      #     # print Cypress and OS info
      #   run: |
      #     npx cypress@4.11.0
      #     npx cypress verify
      #     npx cypress info
      #     npx cypress version
  # test:
  #   name: Test
  #   needs: setup
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v2
  #     - name: Set up node
  #       uses: actions/setup-node@v2
  #       with:
  #         node-version: 12
  #     - name: Load the cache folder
  #       uses: actions/cache@v2
  #       id: cache
  #       with:
  #         path: ~/.cache
  #         key: ${{ runner.os }}-cache-${{ hashFiles('**/yarn.lock') }}
  #         restore-keys: |
  #           ${{ runner.os }}-cache-
  #     - name: Unit Test
  #       run: yarn test
  #     # - name: Coveralls
  #     #   uses: coverallsapp/github-action@v1.1.2
  #     #   with:
  #     #     github-token: ${{ secrets.GITHUB_TOKEN }}
  # build:
  #   name: Build apps
  #   needs: setup
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v2
  #     - name: Set up node
  #       uses: actions/setup-node@v2
  #       with:
  #         node-version: 12
  #     - name: Load the cache folder
  #       uses: actions/cache@v2
  #       id: cache
  #       with:
  #         path: ~/.cache
  #         key: ${{ runner.os }}-cache-${{ hashFiles('**/yarn.lock') }}
  #         restore-keys: |
  #           ${{ runner.os }}-cache-
  #     - name: Build Web Apps
  #       run: yarn build
  #     - name: Upload websites artifact
  #       uses: actions/upload-artifact@v2
  #       with:
  #         name: website
  #         path: build
  # integration:
  #   name: Integration tests
  #   needs: build
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v2
  #     - name: Set up node
  #       uses: actions/setup-node@v2
  #       with:
  #         node-version: 12
  #     - name: Load the cache folder
  #       uses: actions/cache@v2
  #       id: cache
  #       with:
  #         path: ~/.cache
  #         key: ${{ runner.os }}-cache-${{ hashFiles('**/yarn.lock') }}
  #         restore-keys: |
  #           ${{ runner.os }}-cache-
  #     # # Custom cache folder for cypress not supported by cypress' gh action
  #     # - name: Cache Cypress
  #     #   uses: actions/cache@v2
  #     #   id: cache-cypress
  #     #   with:
  #     #     path: ~/.cache/Cypress
  #     #     key: ${{ runner.os }}-cypress-${{ hashFiles('**/yarn.lock') }}
  #     #     restore-keys: |
  #     #       ${{ runner.os }}-cypress-
  #     # TODO: remove
  #     - name: Verify Cypress
  #       if: steps.cache.outputs.cache-hit != 'true'
  #       env:
  #         # make sure every Cypress install prints minimal information
  #         CI: 1
  #         # print Cypress and OS info
  #       run: |
  #         npx cypress@4.11.0 verify
  #     # Fetch build artifacts
  #     - name: Download website
  #       uses: actions/download-artifact@v2
  #     - name: Cypress run
  #       uses: cypress-io/github-action@v2
  #       with:
  #         start: yarn serve
  #         wait-on: http://localhost:3000
  #         # Custom cache key only available for npm cache
  #         # cache-key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
  #         # build: yarn build
  # deploy:
  #   name: Deploy
  #   needs: build
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Download website
  #       uses: actions/download-artifact@v2
  #     - name: Configure AWS credentials
  #       uses: aws-actions/configure-aws-credentials@v1
  #       with:
  #         aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
  #         aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  #         aws-region: ${{ secrets.AWS_REGION }}
  #     - name: Get PR number
  #       uses: jwalton/gh-find-current-pr@v1
  #       id: findPr
  #       with:
  #         github-token: ${{ secrets.GITHUB_TOKEN }}
  #     - name: 'Deploy to S3: PRaul'
  #       if: success() && steps.findPr.outputs.number
  #       run: aws s3 sync website s3://${{ secrets.AWS_REVIEW_BUCKET_NAME }}/${{ env.REPO_NAME_SLUG }}/pr${{ steps.findPr.outputs.number }} --delete
  #     - name: 'PRaul: Comment PR with app URLs'
  #       uses: mshick/add-pr-comment@v1
  #       with:
  #         message: |
  #           * **ðŸ”­ [GP Swap](${{ env.REVIEW_FEATURE_URL }})**: Gnosis Protocol v2 Swap UI
  #         repo-token: ${{ secrets.GITHUB_TOKEN }}
  #         repo-token-user-login: 'github-actions[bot]'
  #       if: success() && steps.findPr.outputs.number
  #       env:
  #         REVIEW_FEATURE_URL: https://pr${{ steps.findPr.outputs.number }}--${{ env.REPO_NAME_SLUG }}.review.gnosisdev.com
  #     - name: 'Deploy to S3: Develop'
  #       if: github.ref == 'refs/heads/develop'
  #       run: aws s3 sync website s3://${{ secrets.AWS_DEV_BUCKET_NAME }} --delete
  #     - name: 'Deploy to S3: Staging'
  #       if: github.ref == 'refs/heads/master'
  #       run: aws s3 sync website s3://${{ secrets.AWS_STAGING_BUCKET_NAME }}/current --delete
